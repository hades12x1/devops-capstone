version: 2.1

commands:
   destroy-environment:
      description: Destroy front-end cloudformation stacks
      parameters:
         workflow_id:
            type: string
      steps:
         - run:
            name: Destroy frontend
            when: on_fail
            command: |
               aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force
               aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>

jobs:
   build:
      docker:
         - image: python:3.7.3-stretch
      steps:
         - checkout
         - run:
            name: Make install
            command: |
               cd nginx-christmas
               make install

   test:
      docker:
         - image: python:3.7.3-stretch
      steps:
         - checkout
         - run:
            name: Lint html
            command: |
               cd nginx-christmas
               make install
               make lint

   docker-build:
      docker:
         - image: cimg/go:1.17
      working_directory: ~/repo
      steps:
         - checkout
         - setup_remote_docker:
            version: 20.10.14
            docker_layer_caching: true
         - run:
            name: build and tag docker hub
            command: |
               cd nginx-christmas
               docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}
               docker build -t nginx-christmas:latest .
               docker tag nginx-christmas:latest ${DOCKERHUB_USERNAME}/nginx-christmas:latest
               docker push ${DOCKERHUB_USERNAME}/nginx-christmas:latest

   deploy-infrastructure:
      docker:
         - image: amazon/aws-cli:latest
      working_directory: ~/repo
      steps:
         - checkout
         - run:
            name: Ensure front-end infrastructure exist
            command: |
               aws cloudformation deploy \
               --template-file .circleci/files/frontend.yml \
               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
               --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
         - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

   deploy-frontend:
      docker:
         - image: amazon/aws-cli
      working_directory: ~/repo
      steps:
         - checkout
         - run:
            name: Deploy frontend objects
            command: |
               aws s3 sync nginx-christmas s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
         - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

   smoke-test:
      docker:
         - image: python:3.7-alpine3.11
      steps:
         - checkout
         - run:
            name: Install dependencies
            command: |
               apk add curl
         - run:
            name: Frontend smoke test.
            command: |
               URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/"            
               if curl -s ${URL} | grep "ChuyenNS"
               then
                  return 1
               else
                  return 1
               fi
         - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

   cloudfront-update:
      docker:
         - image: amazon/aws-cli
      steps:
         - checkout
         - run:
            name: Save Old Workflow ID to kvdb.io
            command: |
               export OLD_WORKFLOW_ID=$(aws cloudformation \
                     list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                     --no-paginate --output text)
               echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
               curl https://kvdb.io/5XsyoCcJAm9CPue12pG7GW/old_workflow_id -d "${OLD_WORKFLOW_ID}"
         - run:
            name: Update cloudfront distribution
            no_output_timeout: 18m
            command: |
               echo ${CIRCLE_WORKFLOW_ID:0:7}
               aws cloudformation deploy \
               --template-file .circleci/files/cloudfront.yml \
               --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" 
         - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

   cleanup:
      docker:
         - image: amazon/aws-cli
      steps:
         - checkout
         - run:
            name: Get old stack workflow id
            command: |
               export OldWorkflowID=$(curl --insecure https://kvdb.io/5XsyoCcJAm9CPue12pG7GW/old_workflow_id)
               echo  OldWorkflowID:  "${OldWorkflowID}"
               echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
               # Fetch the stack names
               export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                     --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
               echo Stack names= "${STACKS[@]}"
               if [ -z "$var" ]
               then
                  echo "Nothing Clean........"
               else
                  if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
                  then
                     echo "cleaning up ............."
                     echo bucket= "s3://udapeople-${OldWorkflowID}"
                     aws s3 rb "s3://udapeople-${OldWorkflowID}" --force
                     aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
                  else
                     echo "Nothing Clean........"
                  fi
               fi

workflows:
   capstone:
      jobs:
         - build
         - test:
            requires: [build]
         - docker-build:
            requires: [test]
         - deploy-infrastructure:
            requires: [docker-build]
            filters:
               branches:
                  only: [master]
         - deploy-frontend:
            requires: [deploy-infrastructure]
         - smoke-test:
            requires: [deploy-frontend]
         - cloudfront-update:
            requires: [smoke-test]
         - cleanup:
            requires: [cloudfront-update]